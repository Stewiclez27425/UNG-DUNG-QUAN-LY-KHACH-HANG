#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#H·ªÜ TH·ªêNG ƒêƒÇNG NH·∫¨P ƒê∆†N GI·∫¢N CHO ·ª®NG D·ª§NG QU·∫¢N L√ù KH√ÅCH H√ÄNG
#===========================================================
#S·ª≠ d·ª•ng functions thu·∫ßn t√∫y, kh√¥ng s·ª≠ d·ª•ng OOP (Object-Oriented Programming)
#L∆∞u tr·ªØ th√¥ng tin ng∆∞·ªùi d√πng trong file Excel userdatalogin.xlsx

# ===========================
# IMPORT C√ÅC TH∆Ø VI·ªÜN C·∫¶N THI·∫æT
# ===========================
import os
from datetime import datetime
from typing import Dict, List, Optional, Tuple
from functools import wraps

# Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt cho Excel v√† Flask
try:
    from openpyxl import load_workbook, Workbook
    from flask import session, request, redirect, url_for, flash, render_template, jsonify
except ImportError as e:
    print(f"‚ùå L·ªói import th∆∞ vi·ªán: {e}")
    print("üì¶ Vui l√≤ng c√†i ƒë·∫∑t c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt:")
    print("   pip install openpyxl flask")
    print("   ho·∫∑c: pip install -r requirements.txt")

# ===========================
# BI·∫æN TO√ÄN C·ª§C V√Ä C·∫§U H√åNH
# ===========================

# T√™n file Excel ch·ª©a d·ªØ li·ªáu ng∆∞·ªùi d√πng
USERDATA_FILE = "userdatalogin.xlsx"

# Dictionary l∆∞u tr·ªØ th√¥ng tin t·∫•t c·∫£ ng∆∞·ªùi d√πng trong b·ªô nh·ªõ
# C·∫•u tr√∫c: {username: {th√¥ng tin ng∆∞·ªùi d√πng}}
users_data = {}

# Dictionary ƒë·ªãnh nghƒ©a c√°c c·∫•p ƒë·ªô quy·ªÅn truy c·∫≠p
# S·ªë c√†ng nh·ªè th√¨ quy·ªÅn c√†ng cao
PERMISSION_LEVELS = {
    "FULL": 1,          # Quy·ªÅn ƒë·∫ßy ƒë·ªß (Admin)
    "READ_WRITE": 2,    # Quy·ªÅn ƒë·ªçc v√† ghi (Manager)
    "READ_ONLY": 3      # Ch·ªâ quy·ªÅn ƒë·ªçc (Staff)
}

# ===========================
# C√ÅC FUNCTIONS X·ª¨ L√ù FILE EXCEL
# ===========================

def create_userdata_file():
    """
    T·∫†O FILE EXCEL CH·ª®A D·ªÆ LI·ªÜU NG∆Ø·ªúI D√ôNG
    =====================================
    
    Ch·ª©c nƒÉng:
    - T·∫°o file Excel m·ªõi n·∫øu ch∆∞a t·ªìn t·∫°i
    - Thi·∫øt l·∫≠p c·∫•u tr√∫c b·∫£ng v·ªõi c√°c c·ªôt c·∫ßn thi·∫øt
    - Th√™m d·ªØ li·ªáu m·∫´u cho c√°c t√†i kho·∫£n m·∫∑c ƒë·ªãnh
    
    C·∫•u tr√∫c file Excel:
    - C·ªôt A: Username (T√™n ƒëƒÉng nh·∫≠p)
    - C·ªôt B: Password (M·∫≠t kh·∫©u)
    - C·ªôt C: FullName (H·ªç t√™n ƒë·∫ßy ƒë·ªß)
    - C·ªôt D: Level (C·∫•p b·∫≠c: 1=Admin, 2=Manager, 3=Staff)
    - C·ªôt E: Permission (Quy·ªÅn: FULL/READ_WRITE/READ_ONLY)
    - C·ªôt F: Status (Tr·∫°ng th√°i: ACTIVE/INACTIVE)
    - C·ªôt G: CreatedDate (Ng√†y t·∫°o t√†i kho·∫£n)
    
    Returns:
        bool: True n·∫øu t·∫°o file th√†nh c√¥ng, False n·∫øu c√≥ l·ªói
    """
    try:
        # Ki·ªÉm tra xem file ƒë√£ t·ªìn t·∫°i ch∆∞a
        if os.path.exists(USERDATA_FILE):
            print(f"üìÅ File {USERDATA_FILE} ƒë√£ t·ªìn t·∫°i, kh√¥ng c·∫ßn t·∫°o m·ªõi")
            return True
        
        print(f"üî® ƒêang t·∫°o file {USERDATA_FILE}...")
        
        # T·∫°o workbook v√† worksheet m·ªõi
        wb = Workbook()
        ws = wb.active
        ws.title = "UserData"
        
        # ƒê·ªãnh nghƒ©a c√°c c·ªôt header
        headers = [
            "Username",     # T√™n ƒëƒÉng nh·∫≠p (duy nh·∫•t)
            "Password",     # M·∫≠t kh·∫©u (plain text - trong th·ª±c t·∫ø n√™n m√£ h√≥a)
            "FullName",     # H·ªç t√™n ƒë·∫ßy ƒë·ªß
            "Level",        # C·∫•p b·∫≠c (1-3)
            "Permission",   # Quy·ªÅn truy c·∫≠p
            "Status",       # Tr·∫°ng th√°i t√†i kho·∫£n
            "CreatedDate"   # Ng√†y t·∫°o
        ]
        
        # Ghi header v√†o d√≤ng ƒë·∫ßu ti√™n
        for col, header in enumerate(headers, 1):
            ws.cell(row=1, column=col, value=header)
        
        # D·ªØ li·ªáu m·∫´u cho c√°c t√†i kho·∫£n m·∫∑c ƒë·ªãnh
        sample_data = [
            # [Username, Password, FullName, Level, Permission, Status, CreatedDate]
            ["admin", "123456", "Nguyen Van Admin", 1, "FULL", "ACTIVE", "01/01/2024"],
            ["manager", "654321", "Tran Thi Manager", 2, "READ_WRITE", "ACTIVE", "01/01/2024"],
            ["staff1", "111111", "Le Van Staff", 3, "READ_ONLY", "ACTIVE", "01/01/2024"],
            ["staff2", "222222", "Pham Thi Staff", 3, "READ_ONLY", "ACTIVE", "01/01/2024"],
            ["demo", "demo123", "Demo User", 3, "READ_ONLY", "INACTIVE", "01/01/2024"]
        ]
        
        # Ghi d·ªØ li·ªáu m·∫´u v√†o file Excel
        for row_idx, data in enumerate(sample_data, 2):  # B·∫Øt ƒë·∫ßu t·ª´ d√≤ng 2
            for col_idx, value in enumerate(data, 1):    # B·∫Øt ƒë·∫ßu t·ª´ c·ªôt 1
                ws.cell(row=row_idx, column=col_idx, value=value)
        
        # L∆∞u file Excel
        wb.save(USERDATA_FILE)
        print(f"‚úÖ ƒê√£ t·∫°o file {USERDATA_FILE} th√†nh c√¥ng v·ªõi {len(sample_data)} t√†i kho·∫£n m·∫´u")
        
        # In th√¥ng tin c√°c t√†i kho·∫£n m·∫´u
        print("üìã C√°c t√†i kho·∫£n m·∫´u ƒë√£ ƒë∆∞·ª£c t·∫°o:")
        print("   üë§ admin/123456 - Quy·ªÅn FULL (Admin)")
        print("   üë§ manager/654321 - Quy·ªÅn READ_WRITE (Manager)")
        print("   üë§ staff1/111111 - Quy·ªÅn READ_ONLY (Staff)")
        print("   üë§ staff2/222222 - Quy·ªÅn READ_ONLY (Staff)")
        print("   üë§ demo/demo123 - T√†i kho·∫£n b·ªã kh√≥a")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫°o file {USERDATA_FILE}: {e}")
        return False

def load_users():
    """
    T·∫¢I D·ªÆ LI·ªÜU NG∆Ø·ªúI D√ôNG T·ª™ FILE EXCEL V√ÄO B·ªò NH·ªö
    ===============================================
    
    Ch·ª©c nƒÉng:
    - ƒê·ªçc to√†n b·ªô d·ªØ li·ªáu t·ª´ file Excel
    - Chuy·ªÉn ƒë·ªïi th√†nh dictionary ƒë·ªÉ x·ª≠ l√Ω nhanh
    - L∆∞u v√†o bi·∫øn to√†n c·ª•c users_data
    - T·ª± ƒë·ªông t·∫°o file n·∫øu ch∆∞a t·ªìn t·∫°i
    
    Global Variables:
        users_data (dict): Dictionary ch·ª©a th√¥ng tin t·∫•t c·∫£ ng∆∞·ªùi d√πng
    
    Returns:
        bool: True n·∫øu t·∫£i th√†nh c√¥ng, False n·∫øu c√≥ l·ªói
    """
    global users_data
    
    try:
        print(f"üìñ ƒêang t·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng t·ª´ {USERDATA_FILE}...")
        
        # Ki·ªÉm tra v√† t·∫°o file n·∫øu ch∆∞a t·ªìn t·∫°i
        if not os.path.exists(USERDATA_FILE):
            print(f"‚ö†Ô∏è  File {USERDATA_FILE} ch∆∞a t·ªìn t·∫°i, ƒëang t·∫°o m·ªõi...")
            if not create_userdata_file():
                return False
        
        # M·ªü file Excel
        wb = load_workbook(USERDATA_FILE)
        ws = wb.active
        
        # L·∫•y danh s√°ch header t·ª´ d√≤ng ƒë·∫ßu ti√™n
        header = [cell.value for cell in ws[1]]
        print(f"üìä C·∫•u tr√∫c d·ªØ li·ªáu: {header}")
        
        # Kh·ªüi t·∫°o l·∫°i dictionary users_data
        users_data = {}
        
        # ƒê·ªçc t·ª´ng d√≤ng d·ªØ li·ªáu (b·ªè qua d√≤ng header)
        row_count = 0
        for row in ws.iter_rows(min_row=2, values_only=True):
            # Ki·ªÉm tra d√≤ng c√≥ d·ªØ li·ªáu kh√¥ng (kh√¥ng ph·∫£i d√≤ng tr·ªëng)
            if row and any(cell is not None for cell in row):
                # T·∫°o dictionary cho m·ªôt ng∆∞·ªùi d√πng
                user_info = dict(zip(header, row))
                
                # L·∫•y username l√†m key
                username = user_info.get("Username", "")
                if username and username.strip():  # Ki·ªÉm tra username kh√¥ng r·ªóng
                    # Chu·∫©n h√≥a d·ªØ li·ªáu
                    user_info["Username"] = str(username).strip()
                    user_info["Password"] = str(user_info.get("Password", "")).strip()
                    user_info["FullName"] = str(user_info.get("FullName", "")).strip()
                    user_info["Level"] = int(user_info.get("Level", 3))
                    user_info["Permission"] = str(user_info.get("Permission", "READ_ONLY")).strip()
                    user_info["Status"] = str(user_info.get("Status", "INACTIVE")).strip()
                    user_info["CreatedDate"] = str(user_info.get("CreatedDate", "")).strip()
                    
                    # L∆∞u v√†o dictionary
                    users_data[username] = user_info
                    row_count += 1
        
        print(f"‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng {row_count} ng∆∞·ªùi d√πng t·ª´ {USERDATA_FILE}")
        
        # In th·ªëng k√™ nhanh
        active_users = sum(1 for user in users_data.values() if user.get("Status") == "ACTIVE")
        print(f"üìà Th·ªëng k√™: {active_users}/{row_count} t√†i kho·∫£n ƒëang ho·∫°t ƒë·ªông")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng: {e}")
        users_data = {}  # Reset v·ªÅ dictionary r·ªóng n·∫øu c√≥ l·ªói
        return False

def save_users():
    """
    L∆ØU D·ªÆ LI·ªÜU NG∆Ø·ªúI D√ôNG T·ª™ B·ªò NH·ªö V√ÄO FILE EXCEL
    ===============================================
    
    Ch·ª©c nƒÉng:
    - Ghi to√†n b·ªô d·ªØ li·ªáu t·ª´ users_data v√†o file Excel
    - T·∫°o file Excel m·ªõi (ghi ƒë√® file c≈©)
    - ƒê·∫£m b·∫£o c·∫•u tr√∫c d·ªØ li·ªáu nh·∫•t qu√°n
    
    Global Variables:
        users_data (dict): Dictionary ch·ª©a th√¥ng tin t·∫•t c·∫£ ng∆∞·ªùi d√πng
    
    Returns:
        bool: True n·∫øu l∆∞u th√†nh c√¥ng, False n·∫øu c√≥ l·ªói
    """
    global users_data
    
    try:
        print(f"üíæ ƒêang l∆∞u {len(users_data)} ng∆∞·ªùi d√πng v√†o {USERDATA_FILE}...")
        
        # T·∫°o workbook v√† worksheet m·ªõi
        wb = Workbook()
        ws = wb.active
        ws.title = "UserData"
        
        # ƒê·ªãnh nghƒ©a c√°c c·ªôt header (ph·∫£i gi·ªëng v·ªõi create_userdata_file)
        headers = ["Username", "Password", "FullName", "Level", "Permission", "Status", "CreatedDate"]
        
        # Ghi header v√†o d√≤ng ƒë·∫ßu ti√™n
        for col, header in enumerate(headers, 1):
            ws.cell(row=1, column=col, value=header)
        
        # Ghi d·ªØ li·ªáu ng∆∞·ªùi d√πng
        for row_idx, user_info in enumerate(users_data.values(), 2):  # B·∫Øt ƒë·∫ßu t·ª´ d√≤ng 2
            ws.cell(row=row_idx, column=1, value=user_info.get("Username", ""))
            ws.cell(row=row_idx, column=2, value=user_info.get("Password", ""))
            ws.cell(row=row_idx, column=3, value=user_info.get("FullName", ""))
            ws.cell(row=row_idx, column=4, value=user_info.get("Level", 3))
            ws.cell(row=row_idx, column=5, value=user_info.get("Permission", "READ_ONLY"))
            ws.cell(row=row_idx, column=6, value=user_info.get("Status", "ACTIVE"))
            ws.cell(row=row_idx, column=7, value=user_info.get("CreatedDate", ""))
        
        # L∆∞u file Excel
        wb.save(USERDATA_FILE)
        print(f"‚úÖ ƒê√£ l∆∞u th√†nh c√¥ng {len(users_data)} ng∆∞·ªùi d√πng v√†o {USERDATA_FILE}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói khi l∆∞u d·ªØ li·ªáu ng∆∞·ªùi d√πng: {e}")
        return False

# ===========================
# C√ÅC FUNCTIONS X√ÅC TH·ª∞C V√Ä ƒêƒÇNG NH·∫¨P
# ===========================

def authenticate_user(username: str, password: str) -> Optional[Dict]:
    """
    X√ÅC TH·ª∞C ƒêƒÇNG NH·∫¨P NG∆Ø·ªúI D√ôNG
    =============================
    
    Ch·ª©c nƒÉng:
    - Ki·ªÉm tra username v√† password c√≥ ƒë√∫ng kh√¥ng
    - Ki·ªÉm tra t√†i kho·∫£n c√≥ ƒëang ho·∫°t ƒë·ªông kh√¥ng
    - Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng n·∫øu ƒëƒÉng nh·∫≠p th√†nh c√¥ng
    
    Args:
        username (str): T√™n ƒëƒÉng nh·∫≠p
        password (str): M·∫≠t kh·∫©u
    
    Returns:
        Optional[Dict]: Dictionary ch·ª©a th√¥ng tin ng∆∞·ªùi d√πng n·∫øu th√†nh c√¥ng, None n·∫øu th·∫•t b·∫°i
    
    Example:
        user_info = authenticate_user("admin", "123456")
        if user_info:
            print(f"ƒêƒÉng nh·∫≠p th√†nh c√¥ng: {user_info['FullName']}")
        else:
            print("ƒêƒÉng nh·∫≠p th·∫•t b·∫°i!")
    """
    # Ki·ªÉm tra input
    if not username or not password:
        print("‚ö†Ô∏è  Username v√† password kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
        return None
    
    # Ki·ªÉm tra username c√≥ t·ªìn t·∫°i kh√¥ng
    if username not in users_data:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y username '{username}'")
        return None
    
    user_info = users_data[username]
    
    # Ki·ªÉm tra password
    if user_info.get("Password") != password:
        print(f"‚ùå M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng cho username '{username}'")
        return None
    
    # Ki·ªÉm tra tr·∫°ng th√°i t√†i kho·∫£n
    if user_info.get("Status") != "ACTIVE":
        print(f"‚ùå T√†i kho·∫£n '{username}' ƒë√£ b·ªã kh√≥a ho·∫∑c kh√¥ng ho·∫°t ƒë·ªông")
        return None
    
    # ƒêƒÉng nh·∫≠p th√†nh c√¥ng
    print(f"‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng: {user_info.get('FullName', username)}")
    return user_info

def get_user_info(username: str) -> Optional[Dict]:
    """
    L·∫§Y TH√îNG TIN CHI TI·∫æT C·ª¶A NG∆Ø·ªúI D√ôNG
    ====================================
    
    Ch·ª©c nƒÉng:
    - Tr·∫£ v·ªÅ to√†n b·ªô th√¥ng tin c·ªßa m·ªôt ng∆∞·ªùi d√πng
    - Kh√¥ng y√™u c·∫ßu x√°c th·ª±c m·∫≠t kh·∫©u
    
    Args:
        username (str): T√™n ƒëƒÉng nh·∫≠p
    
    Returns:
        Optional[Dict]: Dictionary ch·ª©a th√¥ng tin ng∆∞·ªùi d√πng, None n·∫øu kh√¥ng t√¨m th·∫•y
    
    Example:
        user_info = get_user_info("admin")
        if user_info:
            print(f"H·ªç t√™n: {user_info['FullName']}")
            print(f"Quy·ªÅn: {user_info['Permission']}")
    """
    return users_data.get(username)

def is_user_active(username: str) -> bool:
    """
    KI·ªÇM TRA TR·∫†NG TH√ÅI HO·∫†T ƒê·ªòNG C·ª¶A T√ÄI KHO·∫¢N
    ==========================================
    
    Args:
        username (str): T√™n ƒëƒÉng nh·∫≠p
    
    Returns:
        bool: True n·∫øu t√†i kho·∫£n ƒëang ho·∫°t ƒë·ªông, False n·∫øu kh√¥ng
    
    Example:
        if is_user_active("admin"):
            print("T√†i kho·∫£n admin ƒëang ho·∫°t ƒë·ªông")
        else:
            print("T√†i kho·∫£n admin b·ªã kh√≥a")
    """
    user_info = users_data.get(username)
    if user_info:
        return user_info.get("Status") == "ACTIVE"
    return False

# ===========================
# C√ÅC FUNCTIONS KI·ªÇM TRA QUY·ªÄN TRUY C·∫¨P
# ===========================

def check_permission(username: str, required_permission: str) -> bool:
    """
    KI·ªÇM TRA QUY·ªÄN TRUY C·∫¨P C·ª¶A NG∆Ø·ªúI D√ôNG
    =====================================
    
    Ch·ª©c nƒÉng:
    - So s√°nh quy·ªÅn c·ªßa ng∆∞·ªùi d√πng v·ªõi quy·ªÅn y√™u c·∫ßu
    - S·ª≠ d·ª•ng h·ªá th·ªëng ph√¢n c·∫•p: FULL > READ_WRITE > READ_ONLY
    
    Args:
        username (str): T√™n ƒëƒÉng nh·∫≠p
        required_permission (str): Quy·ªÅn y√™u c·∫ßu (FULL/READ_WRITE/READ_ONLY)
    
    Returns:
        bool: True n·∫øu c√≥ quy·ªÅn, False n·∫øu kh√¥ng c√≥ quy·ªÅn
    
    Example:
        if check_permission("admin", "FULL"):
            print("Admin c√≥ quy·ªÅn ƒë·∫ßy ƒë·ªß")
        
        if check_permission("staff1", "READ_WRITE"):
            print("Staff c√≥ quy·ªÅn ghi")  # S·∫Ω kh√¥ng in v√¨ staff ch·ªâ c√≥ READ_ONLY
    """
    # Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
    user_info = users_data.get(username)
    if not user_info:
        return False
    
    # Ki·ªÉm tra t√†i kho·∫£n c√≥ ho·∫°t ƒë·ªông kh√¥ng
    if not is_user_active(username):
        return False
    
    # L·∫•y quy·ªÅn c·ªßa ng∆∞·ªùi d√πng
    user_permission = user_info.get("Permission", "READ_ONLY")
    
    # L·∫•y level c·ªßa quy·ªÅn (s·ªë c√†ng nh·ªè th√¨ quy·ªÅn c√†ng cao)
    user_level = PERMISSION_LEVELS.get(user_permission, 999)
    required_level = PERMISSION_LEVELS.get(required_permission, 999)
    
    # Ki·ªÉm tra quy·ªÅn
    return user_level <= required_level

def check_user_level(username: str, min_level: int) -> bool:
    """
    KI·ªÇM TRA C·∫§P B·∫¨C T·ªêI THI·ªÇU C·ª¶A NG∆Ø·ªúI D√ôNG
    ========================================
    
    Ch·ª©c nƒÉng:
    - Ki·ªÉm tra c·∫•p b·∫≠c c·ªßa ng∆∞·ªùi d√πng c√≥ ƒë·ªß ƒëi·ªÅu ki·ªán kh√¥ng
    - C·∫•p b·∫≠c: 1=Admin, 2=Manager, 3=Staff (s·ªë c√†ng nh·ªè th√¨ c·∫•p c√†ng cao)
    
    Args:
        username (str): T√™n ƒëƒÉng nh·∫≠p
        min_level (int): C·∫•p b·∫≠c t·ªëi thi·ªÉu y√™u c·∫ßu
    
    Returns:
        bool: True n·∫øu ƒë·ªß c·∫•p b·∫≠c, False n·∫øu kh√¥ng ƒë·ªß
    
    Example:
        if check_user_level("admin", 1):
            print("Admin c√≥ c·∫•p b·∫≠c ƒë·ªß ƒë·ªÉ truy c·∫≠p")
        
        if check_user_level("staff1", 2):
            print("Staff c√≥ c·∫•p Manager tr·ªü l√™n")  # S·∫Ω kh√¥ng in v√¨ staff l√† c·∫•p 3
    """
    # Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
    user_info = users_data.get(username)
    if not user_info:
        return False
    
    # Ki·ªÉm tra t√†i kho·∫£n c√≥ ho·∫°t ƒë·ªông kh√¥ng
    if not is_user_active(username):
        return False
    
    # L·∫•y c·∫•p b·∫≠c c·ªßa ng∆∞·ªùi d√πng
    user_level = user_info.get("Level", 999)
    
    # Ki·ªÉm tra c·∫•p b·∫≠c (s·ªë c√†ng nh·ªè th√¨ c·∫•p c√†ng cao)
    return user_level <= min_level

# ===========================
# C√ÅC FUNCTIONS QU·∫¢N L√ù NG∆Ø·ªúI D√ôNG
# ===========================

def add_new_user(username: str, password: str, full_name: str, 
                 level: int, permission: str) -> bool:
    """
    TH√äM NG∆Ø·ªúI D√ôNG M·ªöI V√ÄO H·ªÜ TH·ªêNG
    ===============================
    
    Ch·ª©c nƒÉng:
    - T·∫°o t√†i kho·∫£n m·ªõi v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß
    - Ki·ªÉm tra username c√≥ b·ªã tr√πng kh√¥ng
    - T·ª± ƒë·ªông l∆∞u v√†o file Excel
    
    Args:
        username (str): T√™n ƒëƒÉng nh·∫≠p (duy nh·∫•t)
        password (str): M·∫≠t kh·∫©u
        full_name (str): H·ªç t√™n ƒë·∫ßy ƒë·ªß
        level (int): C·∫•p b·∫≠c (1=Admin, 2=Manager, 3=Staff)
        permission (str): Quy·ªÅn truy c·∫≠p (FULL/READ_WRITE/READ_ONLY)
    
    Returns:
        bool: True n·∫øu th√™m th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
    
    Example:
        success = add_new_user("newuser", "password123", "Nguyen Van New", 3, "READ_ONLY")
        if success:
            print("ƒê√£ t·∫°o t√†i kho·∫£n th√†nh c√¥ng")
    """
    global users_data
    
    try:
        # Ki·ªÉm tra input
        if not username or not password or not full_name:
            print("‚ùå Username, password v√† h·ªç t√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
            return False
        
        # Ki·ªÉm tra username ƒë√£ t·ªìn t·∫°i ch∆∞a
        if username in users_data:
            print(f"‚ùå Username '{username}' ƒë√£ t·ªìn t·∫°i!")
            return False
        
        # Ki·ªÉm tra level h·ª£p l·ªá
        if level not in [1, 2, 3]:
            print("‚ùå C·∫•p b·∫≠c ph·∫£i l√† 1 (Admin), 2 (Manager), ho·∫∑c 3 (Staff)")
            return False
        
        # Ki·ªÉm tra permission h·ª£p l·ªá
        if permission not in PERMISSION_LEVELS:
            print(f"‚ùå Quy·ªÅn truy c·∫≠p ph·∫£i l√† m·ªôt trong: {list(PERMISSION_LEVELS.keys())}")
            return False
        
        print(f"üë§ ƒêang t·∫°o t√†i kho·∫£n m·ªõi cho '{username}'...")
        
        # T·∫°o th√¥ng tin ng∆∞·ªùi d√πng m·ªõi
        user_info = {
            "Username": username.strip(),
            "Password": password.strip(),
            "FullName": full_name.strip(),
            "Level": level,
            "Permission": permission.strip(),
            "Status": "ACTIVE",  # M·∫∑c ƒë·ªãnh l√† ho·∫°t ƒë·ªông
            "CreatedDate": datetime.now().strftime("%d/%m/%Y")
        }
        
        # Th√™m v√†o dictionary
        users_data[username] = user_info
        
        # L∆∞u v√†o file Excel
        if save_users():
            print(f"‚úÖ ƒê√£ t·∫°o t√†i kho·∫£n '{username}' th√†nh c√¥ng!")
            print(f"   üìã H·ªç t√™n: {full_name}")
            print(f"   üéñÔ∏è  C·∫•p b·∫≠c: {level}")
            print(f"   üîê Quy·ªÅn: {permission}")
            return True
        else:
            # Rollback n·∫øu l∆∞u file th·∫•t b·∫°i
            del users_data[username]
            print(f"‚ùå Kh√¥ng th·ªÉ l∆∞u t√†i kho·∫£n '{username}' v√†o file")
            return False
            
    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫°o t√†i kho·∫£n '{username}': {e}")
        return False

def print_all_users():
    """
    IN DANH S√ÅCH T·∫§T C·∫¢ NG∆Ø·ªúI D√ôNG
    =============================
    """
    if not users_data:
        print("üìã Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o trong h·ªá th·ªëng")
        return
    
    print(f"\nüìã DANH S√ÅCH T·∫§T C·∫¢ NG∆Ø·ªúI D√ôNG ({len(users_data)} ng∆∞·ªùi)")
    print("=" * 90)
    print(f"{'Username':<15} {'H·ªç T√™n':<25} {'C·∫•p':<5} {'Quy·ªÅn':<12} {'Tr·∫°ng Th√°i':<12}")
    print("-" * 90)
    
    for user_info in users_data.values():
        status_icon = "üü¢" if user_info.get("Status") == "ACTIVE" else "üî¥"
        print(f"{user_info.get('Username', ''):<15} "
              f"{user_info.get('FullName', ''):<25} "
              f"{user_info.get('Level', ''):<5} "
              f"{user_info.get('Permission', ''):<12} "
              f"{status_icon} {user_info.get('Status', ''):<10}")

# ===========================
# C√ÅC FUNCTIONS DECORATOR CHO FLASK
# ===========================

def require_permission(permission: str):
    """
    DECORATOR KI·ªÇM TRA QUY·ªÄN TRUY C·∫¨P CHO FLASK ROUTES
    ================================================
    
    S·ª≠ d·ª•ng v·ªõi Flask ƒë·ªÉ b·∫£o v·ªá c√°c route c·∫ßn quy·ªÅn ƒë·∫∑c bi·ªát
    
    Args:
        permission (str): Quy·ªÅn y√™u c·∫ßu
    
    Example:
        @app.route('/admin')
        @require_permission('FULL')
        def admin_page():
            return "Trang admin"
    """
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            # Ki·ªÉm tra xem c√≥ th√¥ng tin user trong session kh√¥ng
            if 'username' not in session:
                flash('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p!', 'error')
                return redirect(url_for('login'))
            
            username = session['username']
            
            # Ki·ªÉm tra quy·ªÅn
            if not check_permission(username, permission):
                flash('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ch·ª©c nƒÉng n√†y!', 'error')
                return redirect(url_for('dashboard'))
            
            return f(*args, **kwargs)
        return decorated_function
    return decorator

def require_level(min_level: int):
    """
    DECORATOR KI·ªÇM TRA C·∫§P B·∫¨C T·ªêI THI·ªÇU CHO FLASK ROUTES
    ==================================================
    
    Args:
        min_level (int): C·∫•p b·∫≠c t·ªëi thi·ªÉu y√™u c·∫ßu
    
    Example:
        @app.route('/manager')
        @require_level(2)
        def manager_page():
            return "Trang manager"
    """
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            # Ki·ªÉm tra xem c√≥ th√¥ng tin user trong session kh√¥ng
            if 'username' not in session:
                flash('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p!', 'error')
                return redirect(url_for('login'))
            
            username = session['username']
            
            # Ki·ªÉm tra c·∫•p b·∫≠c
            if not check_user_level(username, min_level):
                flash('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ch·ª©c nƒÉng n√†y!', 'error')
                return redirect(url_for('dashboard'))
            
            return f(*args, **kwargs)
        return decorated_function
    return decorator

def get_user_by_id(user_id: str) -> Optional[Dict]:
    """
    H√ÄM HELPER ƒê·ªÇ L·∫§Y USER THEO ID CHO FLASK-LOGIN
    =============================================
    
    Args:
        user_id (str): ID c·ªßa user (th∆∞·ªùng l√† username)
    
    Returns:
        Optional[Dict]: Th√¥ng tin user n·∫øu t√¨m th·∫•y
    """
    return get_user_info(user_id)

# ===========================
# C√ÅC FUNCTIONS TEST V√Ä DEMO
# ===========================

def test_simple_login_system():
    """
    TEST H·ªÜ TH·ªêNG ƒêƒÇNG NH·∫¨P ƒê∆†N GI·∫¢N
    ===============================
    
    Ch·ª©c nƒÉng:
    - Test t·∫°o file Excel
    - Test t·∫£i d·ªØ li·ªáu
    - Test x√°c th·ª±c ƒëƒÉng nh·∫≠p
    - Test ph√¢n quy·ªÅn
    - Test qu·∫£n l√Ω ng∆∞·ªùi d√πng
    """
    print("\nüß™ TESTING H·ªÜ TH·ªêNG ƒêƒÇNG NH·∫¨P ƒê∆†N GI·∫¢N")
    print("=" * 60)
    
    # Test 1: T·∫°o file userdata
    print("1. üìÅ T·∫°o file d·ªØ li·ªáu ng∆∞·ªùi d√πng...")
    create_userdata_file()
    
    # Test 2: T·∫£i d·ªØ li·ªáu
    print("\n2. üìñ T·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng...")
    load_users()
    
    # Test 3: Test ƒëƒÉng nh·∫≠p
    print("\n3. üîê Test x√°c th·ª±c ƒëƒÉng nh·∫≠p...")
    test_cases = [
        ("admin", "123456", True),
        ("manager", "654321", True),
        ("staff1", "111111", True),
        ("admin", "wrongpass", False),
        ("nonexistent", "123456", False),
        ("demo", "demo123", False)  # T√†i kho·∫£n b·ªã kh√≥a
    ]
    
    for username, password, expected in test_cases:
        user_info = authenticate_user(username, password)
        result = "‚úÖ PASS" if (user_info is not None) == expected else "‚ùå FAIL"
        print(f"   {username}/{password}: {result}")
    
    # Test 4: Test ph√¢n quy·ªÅn
    print("\n4. üîë Test ph√¢n quy·ªÅn...")
    permission_tests = [
        ("admin", "FULL", True),
        ("admin", "READ_WRITE", True),
        ("admin", "READ_ONLY", True),
        ("manager", "FULL", False),
        ("manager", "READ_WRITE", True),
        ("manager", "READ_ONLY", True),
        ("staff1", "FULL", False),
        ("staff1", "READ_WRITE", False),
        ("staff1", "READ_ONLY", True)
    ]
    
    for username, permission, expected in permission_tests:
        result_check = check_permission(username, permission)
        result = "‚úÖ PASS" if result_check == expected else "‚ùå FAIL"
        print(f"   {username} c√≥ quy·ªÅn {permission}: {result}")
    
    # Test 5: Test c·∫•p b·∫≠c
    print("\n5. üéñÔ∏è  Test c·∫•p b·∫≠c...")
    level_tests = [
        ("admin", 1, True),
        ("admin", 2, True),
        ("manager", 1, False),
        ("manager", 2, True),
        ("staff1", 2, False),
        ("staff1", 3, True)
    ]
    
    for username, min_level, expected in level_tests:
        result_check = check_user_level(username, min_level)
        result = "‚úÖ PASS" if result_check == expected else "‚ùå FAIL"
        print(f"   {username} c√≥ c·∫•p >= {min_level}: {result}")
    
    # Test 6: Test th√™m ng∆∞·ªùi d√πng m·ªõi
    print("\n6. üë§ Test th√™m ng∆∞·ªùi d√πng m·ªõi...")
    success = add_new_user("testuser", "test123", "Test User", 3, "READ_ONLY")
    print(f"   Th√™m user m·ªõi: {'‚úÖ PASS' if success else '‚ùå FAIL'}")
    
    # Test 7: Hi·ªÉn th·ªã danh s√°ch ng∆∞·ªùi d√πng
    print("\n7. üìã Hi·ªÉn th·ªã danh s√°ch ng∆∞·ªùi d√πng...")
    print_all_users()
    
    print("\n‚úÖ Ho√†n th√†nh test h·ªá th·ªëng ƒëƒÉng nh·∫≠p ƒë∆°n gi·∫£n!")

def main():
    """
    H√ÄM MAIN - ƒêI·ªÇM KH·ªûI ƒê·∫¶U C·ª¶A CH∆Ø∆†NG TR√åNH
    ========================================
    
    Ch·ª©c nƒÉng:
    - Kh·ªüi t·∫°o h·ªá th·ªëng
    - T·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng
    - Ch·∫°y test demo
    """
    print("KH·ªûI ƒê·ªòNG H·ªÜ TH·ªêNG ƒêƒÇNG NH·∫¨P ƒê∆†N GI·∫¢N")
    print("=" * 50)
    
    # Kh·ªüi t·∫°o h·ªá th·ªëng
    print("ƒêang kh·ªüi t·∫°o h·ªá th·ªëng...")
    load_users()
    
    # Ch·∫°y test
    test_simple_login_system()
    
    print("\nüéâ H·ªá th·ªëng ƒë√£ s·∫µn s√†ng s·ª≠ d·ª•ng!")
    print("üìö C√°c functions ch√≠nh:")
    print("   - authenticate_user(username, password)")
    print("   - check_permission(username, permission)")
    print("   - check_user_level(username, min_level)")
    print("   - add_new_user(username, password, full_name, level, permission)")
    print("   - get_user_info(username)")
    print("   - is_user_active(username)")

if __name__ == "__main__":
    main()
